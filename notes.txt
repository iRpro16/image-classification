* Return folders in directory:

os.listdir(data_dir)

* Loop through every single image in a folder:

os.listdir(os.path.join(data_dir, *folder name*))

* To read an image:

cv2.imread(os.path.join(data, class, image))

* To show image 

img = cv2.imread(os.path.join(data, class, image))

Then use matplotlib

plt.imshow(img)
plt.show()

* Open CV reads in BGR, while matplotlib reads in RGB. To fix:

plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

* Shape of image:

example: (500, 368, 3)

500 => height of image
368 => width of image
3   => number of channels


* .image_dataset_from_directory method:

tf.keras.utils.image_dataset_from_directory()

==> Sets batch size to 32
==> Sets image size to (256, 256)


* Batches:

batch[0] ==> images 
batch[1] ==> labels

batch[0].shape ==> (32, 256, 256, 3)

32 images of 256 x 256 by 3 channels


* Remove unecessary images:

''' 
#Create data directory with images:
data_dir = 'PetImages/Train'
image_exts = ['jpeg', 'jpg', 'bmp', 'png']

#Remove any unecessary extensions
for image_class in os.listdir(data_dir):
    #Loop through every single image in sub-directories
    for image in os.listdir(os.path.join(data_dir, image_class)):
        image_path = os.path.join(data_dir, image_class, image)
        try:
            img = cv2.imread(image_path)
            tip = imghdr.what(image_path)
            if tip not in image_exts:
                print('Image not in ext list ()'.format(image_path))
                #Deletes a file
                os.remove(image_path)
        except Exception as e:
            print('Issue with image ()'.format(image_path))
'''


* Show class on plot

#Class 1 = Dog
#Class 0 = Cat
fig, ax = plt.subplots(ncols=4, figsize=(20, 20))
for idx, img in enumerate(batch[0][:4]):
    ax[idx].imshow(img.astype(int))
    ax[idx].title.set_text(batch[1][idx])